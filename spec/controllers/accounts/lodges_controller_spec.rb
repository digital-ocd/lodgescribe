require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Accounts::LodgesController do
  let(:valid_attributes) { attributes_for(:lodge) }
  include_context 'lodge_with_member'

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:user]
    sign_in member
  end

  describe "GET show" do
    it "assigns the requested lodge as @current_lodge" do
      get :show, { sub_domain: lodge.sub_domain }
      expect(assigns(:current_lodge)).to eq(lodge)
    end
  end

  describe "GET edit" do
    context "as a general Lodge Member" do
      it "raises a 401 exception" do
        expect {
          get :edit, { sub_domain: lodge.sub_domain }
        }.to raise_error ApplicationController::Unauthorized
      end
    end

    context "as a Lodge Officer" do
      it "assigns the requested lodge as @current_lodge" do
        allow(controller.current_user).to receive(:can_admin?).and_return(true)
        get :edit, { sub_domain: lodge.sub_domain }
        expect(assigns(:current_lodge)).to eq(lodge)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      context "as a general Lodge Member" do
        it "raises a 401 exception" do
          expect {
            get :update, { sub_domain: lodge.sub_domain, lodge: { "name" => "Hiram" } }
          }.to raise_error ApplicationController::Unauthorized
        end
      end

      context "as a Lodge Officer" do
        before(:each) do
          allow(controller.current_user).to receive(:can_admin?).and_return(true)
        end

        it "updates the requested lodge" do
          expect_any_instance_of(Lodge).to receive(:update).with({ "name" => "Hiram" })
          put :update, { sub_domain: lodge.sub_domain, lodge: { "name" => "Hiram" } }
        end

        it "assigns the requested lodge as @current_lodge" do
          put :update, { sub_domain: lodge.sub_domain, lodge: { "name" => "Hiram" } }
          expect(assigns(:current_lodge)).to eq(lodge)
        end

        it "redirects to the lodge" do
          put :update, { sub_domain: lodge.sub_domain, lodge: { "name" => "Hiram" } }
          expect(response).to redirect_to(lodge_path(lodge))
        end
      end

    end

    describe "with invalid params" do
      context "as a general Lodge Member" do
        it "raises a 401 exception" do
          expect {
            get :update, { sub_domain: lodge.sub_domain, lodge: { } }
          }.to raise_error ApplicationController::Unauthorized
        end
      end

      context "as a Lodge Officer" do
        before(:each) do
          allow(controller.current_user).to receive(:can_admin?).and_return(true)
        end

        it "assigns the lodge as @current_lodge" do
          allow_any_instance_of(Lodge).to receive(:save).and_return(false)
          put :update, { sub_domain: lodge.sub_domain, lodge: { } }
          expect(assigns(:current_lodge)).to eq(lodge)
        end

        it "re-renders the 'edit' template" do
          allow_any_instance_of(Lodge).to receive(:save).and_return(false)
          put :update, { sub_domain: lodge.sub_domain, lodge: { } }
          expect(response).to render_template("edit")
        end
      end

    end
  end

end
